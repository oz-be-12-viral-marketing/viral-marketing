name: Django Full CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    steps:
      # 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python 설치
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      
          
      # uv 캐시
      - name: Cache uv
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-uv-
            
      # uv 설치
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # 의존성 설치
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install .[dev]

      # Lint (Ruff, Black, isort)
      - name: Run Ruff
        run: uv run ruff check . --extend-ignore=E501,F403

      

      # Django 준비 확인
      - name: Wait for DB
        run: |
          python -c "\
            import os, time
            from django.db import connections
            from django.db.utils import OperationalError
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.dev')
            import django
            django.setup()
            db_conn = None
            retries = 0
            max_retries = 10
            while not db_conn and retries < max_retries:
                try:
                    connections['default'].cursor()
                    print('PostgreSQL is ready!')
                    break
                except OperationalError:
                    retries += 1
                    print(f'Waiting for PostgreSQL... ({retries}/{max_retries})')
                    time.sleep(1)
            if retries == max_retries:
                print('PostgreSQL connection failed after multiple attempts.')
                exit(1)
          "


      # Django 마이그레이션
      - name: Django Migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
        run: |
          DATABASE_URL=${{ env.DATABASE_URL }} uv run python manage.py makemigrations --settings=config.settings.dev
          DATABASE_URL=${{ env.DATABASE_URL }} uv run python manage.py migrate --settings=config.settings.dev

      # Django Tests + Coverage
      - name: Run Django Tests with Coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
        run: |
          uv run coverage run --source='.' manage.py test --settings=config.settings.dev
          uv run coverage report

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -r . $EC2_USER@$EC2_HOST:/home/$EC2_USER/project
          ssh -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/$EC2_USER/project
            uv run python manage.py migrate
            uv run python manage.py collectstatic --noinput
            sudo systemctl restart myproject.service
          EOF

      # Slack 알림
      - name: Slack Notification
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}
          text: "배포 성공: ${{ github.repository }} @ ${{ github.ref }}"
